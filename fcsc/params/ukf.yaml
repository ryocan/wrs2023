# The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
# computation until it receives at least one message from one of the inputs. It will then run continuously at the
# frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
# フィルタが位置推定値を出力する周波数（Hz）。 フィルタは、入力の1つから少なくとも1つのメッセージを受信するまで、計算を開始しないことに注意してください。 その後、さらに測定値を受け取るかどうかに関係なく、ここで指定された頻度で継続的に実行されます。 指定しない場合、デフォルトは30です。
frequency: 30

# The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
# cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
# filter will generate new output. Defaults to 1 / frequency if not specified.
# センサーがタイムアウトしたと見なされるまでの期間（秒単位）。 この場合、EKFを修正せずに予測サイクルを実行します。 このパラメーターは、フィルターが新しい出力を生成する最小周波数と考えることができます。 指定されていない場合、デフォルトは1 /周波数です。
sensor_timeout: 0.1

# ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
# set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
# environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
# by, for example, an IMU. Defaults to false if unspecified.
# ekf_localization_nodeとukf_localization_nodeは、どちらも3D全方向モーションモデルを使用します。 このパラメーターがtrueに設定されている場合、状態推定で3D情報は使用されません。 平面環境で操作していて、たとえばIMUによって検出される可能性のある、グランドプレーンの小さな変動の影響を無視したい場合にこれを使用します。 指定されていない場合、デフォルトはfalseです。
two_d_mode: true

# Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
# future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
# unspecified.
# このパラメーターを使用して、ekf_localization_nodeによって生成された変換にオフセットを提供します。 これは、他のいくつかのパッケージとの相互作用に必要な、変換の将来の日付付けに使用できます。 指定しない場合、デフォルトは0.0です。
transform_time_offset: 0.0

# Use this parameter to provide specify how long the tf listener should wait for a transform to become available. 
# Defaults to 0.0 if unspecified.
# このパラメーターを使用して、tfリスナーが変換が使用可能になるまで待機する時間を指定します。 指定しない場合、デフォルトは0.0です。
transform_timeout: 0.0

# If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
# unhappy with any settings or data.
# 問題が発生した場合は、これをtrueに設定してから、/ Diagnostics_aggトピックをエコーして、ノードが設定やデータに不満を持っていないかどうかを確認してください。
print_diagnostics: true

# Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
# debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
# effects on the performance of the node. Defaults to false if unspecified.
# デバッグ設定。 気弱な人向けではありません。 debug_out_fileで指定されたファイルにばかげた量の情報を出力します。 マトリックスが好きだといいのですが！ これをtrueに設定すると、ノードのパフォーマンスに非常に悪影響を与えることに注意してください。 指定されていない場合、デフォルトはfalseです。
debug: false

# Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
# 指定されていない場合、デフォルトは「robot_localization_debug.txt」です。 フルパスを指定してください。
debug_out_file: /home/takehiro/catkin_ws/src/pmt/rosbag/robot_localization_debug.txt

# REP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and
# earth. base_link is the coordinate frame that is affixed to the robot. Both odom and map are world-fixed frames.
# The robot's position in the odom frame will drift over time, but is accurate in the short term and should be
# continuous. The odom frame is therefore the best frame for executing local motion plans. The map frame, like the odom
# frame, is a world-fixed coordinate frame, and while it contains the most globally accurate position estimate for your
# robot, it is subject to discrete jumps, e.g., due to the fusion of GPS data or a correction from a map-based
# localization node. The earth frame is used to relate multiple map frames by giving them a common reference frame.
# ekf_localization_node and ukf_localization_node are not concerned with the earth frame.
# Here is how to use the following settings:
# REP-105（http://www.ros.org/reps/rep-0105.html）は、base_link、odom、map、およびearthの4つの主要な座標フレームを指定します。 base_linkは、ロボットに固定される座標フレームです。 オドムとマップはどちらも世界的に固定されたフレームです。 オドムフレーム内のロボットの位置は時間の経過とともにドリフトしますが、短期的には正確であり、継続的である必要があります。 したがって、オドムフレームはローカルモーションプランを実行するための最良のフレームです。 マップフレームは、オドムフレームと同様に、世界的に固定された座標フレームであり、ロボットの最もグローバルに正確な位置推定が含まれていますが、GPSデータの融合や補正などにより、離散的なジャンプが発生する可能性があります。 マップベースのローカリゼーションノードから。 地球フレームは、複数のマップフレームに共通の参照フレームを与えることにより、それらを関連付けるために使用されます。 ekf_localization_nodeとukf_localization_nodeは、アースフレームとは関係ありません。 次の設定の使用方法は次のとおりです。
# 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
#     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of
#         odom_frame.
# 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set
#   "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
# 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates
# from landmark observations) then:
#     3a. Set your "world_frame" to your map_frame value
#     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state
#         estimation node from robot_localization! However, that instance should *not* fuse the global data.
map_frame: map              # Defaults to "map" if unspecified
odom_frame: odom            # Defaults to "odom" if unspecified
base_link_frame: base_link  # Defaults to "base_link" if unspecified
world_frame: odom           # Defaults to the value of odom_frame if unspecified

# The filter accepts an arbitrary number of inputs from each input message type (nav_msgs/Odometry,
# geometry_msgs/PoseWithCovarianceStamped, geometry_msgs/TwistWithCovarianceStamped,
# sensor_msgs/Imu). To add an input, simply append the next number in the sequence to its "base" name, e.g., odom0,
# odom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. These parameters obviously have no
# default values, and must be specified.
# フィルタは、各入力メッセージタイプ（nav_msgs / Odometry、geometry_msgs / PoseWithCovarianceStamped、geometry_msgs / TwistWithCovarianceStamped、sensor_msgs / Imu）から任意の数の入力を受け入れます。 入力を追加するには、シーケンス内の次の番号をその「ベース」名に追加するだけです（例：odom0、odom1、twist0、twist1、imu0、imu1、imu2など）。値はトピック名である必要があります。 これらのパラメーターには明らかにデフォルト値がないため、指定する必要があります。
odom0: /whill/odom

# Each sensor reading updates some or all of the filter's state. These options give you greater control over which
# values from each measurement are fed to the filter. For example, if you have an odometry message as input, but only
# want to use its Z position value, then set the entire vector to false, except for the third entry. The order of the
# values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Note that not some message types
# do not provide some of the state variables estimated by the filter. For example, a TwistWithCovarianceStamped message
# has no pose information, so the first six values would be meaningless in that case. Each vector defaults to all false
# if unspecified, effectively making this parameter required for each sensor.
# 各センサーの読み取り値は、フィルターの状態の一部またはすべてを更新します。 これらのオプションを使用すると、各測定のどの値をフィルターに送るかをより細かく制御できます。 たとえば、入力としてオドメトリメッセージがあり、そのZ位置値のみを使用する場合は、3番目のエントリを除くベクトル全体をfalseに設定します。 値の順序は、x、y、z、roll、pitch、yaw、vx、vy、vz、vroll、vpitch、vyaw、ax、ay、azです。 一部のメッセージタイプは、フィルターによって推定された状態変数の一部を提供しないことに注意してください。 たとえば、TwistWithCovarianceStampedメッセージにはポーズ情報がないため、最初の6つの値はその場合は意味がありません。 指定されていない場合、各ベクトルはデフォルトですべてfalseになり、事実上、このパラメーターは各センサーに必要になります。
odom0_config: [true,  true,  false,
               false, false, false,
               false, false, false,
               false, false, true,
               false, false, false]

# If you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
# the size of the subscription queue so that more measurements are fused.
# 高頻度のデータがある場合、または低頻度のパラメーター値で実行している場合は、サブスクリプションキューのサイズを増やして、より多くの測定値が融合されるようにすることができます。
odom0_queue_size: 2

# [ADVANCED] Large messages in ROS can exhibit strange behavior when they arrive at a high frequency. This is a result
# of Nagle's algorithm. This option tells the ROS subscriber to use the tcpNoDelay option, which disables Nagle's
# algorithm.
# [詳細] ROSの大きなメッセージは、高頻度で到着すると奇妙な動作を示す可能性があります。 これは、Nagleのアルゴリズムの結果です。 このオプションは、Nagleのアルゴリズムを無効にするtcpNoDelayオプションを使用するようにROSサブスクライバーに指示します。
odom0_nodelay: false

# [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
# report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
# arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
# measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
# always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
# data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
# integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
# for twist measurements has no effect.
# [詳細] 2つのセンサーで1つのポーズ変数を測定すると、両方のセンサーが共分散を過少報告する状況が発生する可能性があります。 これにより、各測定値が到着すると、フィルターが各測定値間をすばやく前後にジャンプする可能性があります。 このような場合、（a）測定共分散を修正するか、（b）速度もセンサーの1つで測定し、一方のセンサーにポーズを測定させ、もう一方の速度を測定させることが理にかなっています。 ただし、（a）または（b）を実行できるとは限らないため、差分パラメーターを公開します。 差動モードが有効になっている場合、すべての絶対ポーズデータは、絶対ポーズ測定値を微分することによって速度データに変換されます。 これらの速度は、通常どおり統合されます。 注：これは、ポーズ測定を提供するセンサーにのみ適用されます。 ツイスト測定で差分をtrueに設定しても効果はありません。
odom0_differential: false

# [ADVANCED] When the node starts, if this parameter is true, then the first measurement is treated as a "zero point"
# for all future measurements. While you can achieve the same effect with the differential paremeter, the key
# difference is that the relative parameter doesn't cause the measurement to be converted to a velocity before
# integrating it. If you simply want your measurements to start at 0 for a given sensor, set this to true.
# [詳細]ノードの起動時に、このパラメーターがtrueの場合、最初の測定値は、今後のすべての測定値の「ゼロ点」として扱われます。 差動パラメータでも同じ効果を得ることができますが、主な違いは、相対パラメータによって、測定値が積分される前に速度に変換されないことです。 特定のセンサーの測定を0から開始するだけの場合は、これをtrueに設定します。
odom0_relative: false

# [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
# control how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
# numeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
# required. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
# For messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
# the thresholds.
# [詳細]データが外れ値の影響を受ける場合は、マハラノビス距離として表されるこれらのしきい値設定を使用して、センサー測定が許可される現在の車両状態からの距離を制御します。 指定されていない場合、それぞれのデフォルトはnumeric_limits <double> :: max（）です。 不要な場合は、これらのパラメーターを削除することを強くお勧めします。 データは、各変数を個別に指定するのではなく、ポーズ変数とツイスト変数のレベルで指定されます。 ポーズデータとツイストデータの両方を持つメッセージの場合、パラメータは、メッセージのどの部分にしきい値を適用するかを指定します。
odom0_pose_rejection_threshold: 5
odom0_twist_rejection_threshold: 1

# Further input parameter examples
imu0: /imu/data_raw
imu0_config: [false, false, false,
              true,  true,  true,
              false, false, false,
              true,  true,  true,
              true,  true,  true]
imu0_nodelay: false
imu0_differential: false
imu0_relative: true
imu0_queue_size: 5
imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
imu0_twist_rejection_threshold: 0.8                #
imu0_linear_acceleration_rejection_threshold: 0.8  #

# [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
# this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
# [高度]一部のIMUは重力による加速度を自動的に除去し、他のIMUは除去しません。 そうでない場合は、これをtrueに設定し、データがREP-103に準拠していることを*確認*してください。具体的には、データがENUフレーム内にあることを確認してください。
imu0_remove_gravitational_acceleration: true

# [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
# acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
# correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
# problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
# this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
# noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
# for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
# itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
# make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
# predicition. Note that if an acceleration measurement for the variable in question is available from one of the
# inputs, the control term will be ignored.
# Whether or not we use the control input during predicition. Defaults to false.
# [詳細] EKFモデルとUKFモデルは、標準の予測/修正サイクルに従います。予測中に、加速度の基準がない場合、時間t + 1での速度は、時間tでの速度と同じであると単純に予測されます。補正中、この予測値は測定値と融合され、新しい速度推定値が生成されます。最終的な速度は事実上、古い速度と新しい速度の加重平均になるため、これは問題になる可能性があります。この速度が新しいポーズに統合されると、結果としてカバー率が低下する可能性があります。この効果は、ローテーション中のLIDARデータで特に顕著です。これを回避するために、ユーザーは問題の速度変数のprocess_noise_covarianceを膨らませたり、測定自体で問題の変数の分散を減らしたりすることができます。さらに、ユーザーは、予測時にロボットに発行される制御コマンドを利用することもできます。制御が使用される場合、それは加速項に変換され、予測中に使用されます。問題の変数の加速度測定値が入力の1つから利用できる場合、制御項は無視されることに注意してください。予測中に制御入力を使用するかどうか。デフォルトはfalseです。
use_control: true
# Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
# false.
# 入力（cmd_velであると想定）がgeometry_msgs / Twistまたはgeometry_msgs / TwistStampedメッセージであるかどうか。 デフォルトはfalseです。
stamped_control: false
# The last issued control command will be used in prediction for this period. Defaults to 0.2.
# 最後に発行された制御コマンドは、この期間の予測に使用されます。 デフォルトは0.2です。
control_timeout: 0.2
# Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
# どの速度が制御されているか。 順序はvx、vy、vz、vroll、vpitch、vyawです。
control_config: [true, false, false, false, false, true]
# Places limits on how large the acceleration term will be. Should match your robot's kinematics.
# 加速項の大きさに制限を設けます。 ロボットの運動学と一致する必要があります。
acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]
# Acceleration and deceleration limits are not always the same for robots.
# 加速と減速の制限は、ロボットで常に同じであるとは限りません。
deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]
# If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
# gains
# ロボットが瞬時に加速限界に達することができない場合、許可された変更はこれらのゲインで制御できます
acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
# If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
# gains
# ロボットが瞬時に減速限界に到達できない場合は、これらのゲインで許容される変化を制御できます。
deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

# [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# However, if users find that a given variable is slow to converge, one approach is to increase the
# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# unspecified.
# [詳細]プロセスノイズ共分散行列は調整が難しい場合があり、アプリケーションごとに異なる可能性があるため、構成パラメーターとして公開されます。 この行列は、各予測ステップの後に合計エラーに追加するノイズを表します。 全方向性モーションモデルがシステムによく一致するほど、これらの値を小さくすることができます。 ただし、特定の変数の収束が遅いとユーザーが判断した場合、1つのアプローチは、問題の変数のprocess_noise_covariance対角値を増やすことです。これにより、フィルターの予測誤差が大きくなり、フィルターが入力測定値を信頼するようになります。 修正中にもっと。 値は、x、y、z、roll、pitch、yaw、vx、vy、vz、vroll、vpitch、vyaw、ax、ay、azの順序になっています。 指定されていない場合、デフォルトで以下のマトリックスになります。
process_noise_covariance: [0.05, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0.06, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]

# [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
# value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
# question. Users should take care not to use large values for variables that will not be measured directly. The values
# are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
#if unspecified.
# [ADVANCED]これは、状態推定誤差共分散行列の初期値を表します。 対角値（分散）を大きな値に設定すると、問題の変数の初期測定値が急速に収束します。 ユーザーは、直接測定されない変数に大きな値を使用しないように注意する必要があります。 値は、x、y、z、roll、pitch、yaw、vx、vy、vz、vroll、vpitch、vyaw、ax、ay、azの順序になっています。 指定されていない場合、デフォルトで以下のマトリックスになります。
initial_estimate_covariance: [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    1e-9, 0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    1e-9, 0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    1e-9, 0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    1e-9, 0,    0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    1e-9, 0,     0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    1e-9,  0,     0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     1e-9,  0,     0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
                              0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    1e-9]

# [ADVANCED, UKF ONLY] The alpha and kappa variables control the spread of the sigma points. Unless you are familiar
# with UKFs, it's probably a good idea to leave these alone.
# Defaults to 0.001 if unspecified.
# [ADVANCED、UKFのみ]アルファ変数とカッパ変数は、シグマポイントの広がりを制御します。 UKFに精通していない限り、UKFはそのままにしておくことをお勧めします。 指定しない場合、デフォルトは0.001です。
alpha: 0.001
# Defaults to 0 if unspecified.
# 指定されていない場合、デフォルトは0です。
kappa: 0

# [ADVANCED, UKF ONLY] The beta variable relates to the distribution of the state vector. Again, it's probably best to
# leave this alone if you're uncertain. Defaults to 2 if unspecified.
# [ADVANCED、UKFのみ]ベータ変数は、状態ベクトルの分布に関連しています。 繰り返しになりますが、確信が持てない場合は、これをそのままにしておくのがおそらく最善です。 指定されていない場合、デフォルトは2です。
beta: 2
